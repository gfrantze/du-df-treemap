<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>

    <link type="text/css" rel="stylesheet" href="cb.css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">

    <script type="text/javascript" src="javascripts/d3.js"></script>
    <script type="text/javascript" src="cb.js"></script>
    <script type="text/javascript" src="javascripts/d3.layout.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>


    <style type="text/css">




.chart {
  display: block;
  margin: auto;
  margin-top: 40px;
}

rect {
  fill: none;
  pointer-events: all;
}

pre {
  font-size: 18px;
}

line {
  stroke: #000;
  stroke-width: 1.5px;
}
    </style>
  </head>
  <body>
    <div id="body">

      
    <div class="container">


     <div class="row">
        <div id="hi"></div>
      </div>

      <div class="row">
        <div id="tooltip"></div>
      </div>


      <div class="row">
        <div id="footer">
          Treemap Disk Analyzer
          <div class="hint">click or option-click to descend or ascend</div>
          <div><select>
            <option value="size">Size</option>
            <option value="count">Count</option>
          </select></div>
        </div>
      </div>

      <h3> Change Image: </h3>

      <div class="row">
               <select id="chn" name='image'>
               <option value='liang' >/liang</option>
               <option value='su2c'>/su2c</option>
               </select>
          <input type='submit' onclick="newImg()"/>
      </div>


   

    </div>


    </div>
    <script type="text/javascript">

var w = 1280 - 80,
    h = 800 - 180,
    x = d3.scale.linear().range([0, w]),
    y = d3.scale.linear().range([0, h]),
    color = d3.scale.category20(),
    //color= d3.scale.ordinal().range(colorbrewer.RdBu[9]),
    root,
    node;

var treemap = d3.layout.treemap()
    .round(false)
    .size([w, h])
    .sticky(true)
    .value(function(d) { return d.size; });





function curryInit(elem, _json, tm, tt){


console.log("json is");
console.log(_json);


var svg = d3.select( elem ).append("div")
    .attr("class", "chart")
    .style("width", w + "px")
    .style("height", h + "px")
  .append("svg:svg")
    .attr("width", w)
    .attr("height", h)
  .append("svg:g")
    .attr("transform", "translate(.5,.5)");




/*
        // create a name: node map
        var dataMap = _json.reduce(function(map, node) {
            map[node.name] = node;
            return map;
        }, {});


        // create the tree array
        var tree = [];
        _json.forEach(function(node) {
            // add to parent
            var parent = dataMap[node.parent];
            if (parent) {
                // create child array if it doesn't exist
                (parent.children || (parent.children = []))
                    // add node to child array
                    .push(node);
                     delete node["parent"];
                
            } else {
                // parent is null or missing
                tree.push(node);
                delete node["parent"];
            }
        });


*/



//node = root = tree[0];
node=root=_json[0];

  var nodes = tm.nodes(root)
      .filter(function(d) { return !d.children; });


  var cell = svg.selectAll("g")
      .data(nodes)
      .enter().append("svg:g")
      .attr("class", "cell")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      //.on("click", function(d) { return zoom(node == d.parent ? root : d.parent); })
      .on('mouseover', function(d) {
          // this variable will be used in a loop to store the current node being inspected
          var currentNode = d;
          // this array will hold the names of each subsequent parent node
          var nameList = [currentNode.name];
          // as long as the current node has a parent...
          while (typeof currentNode.parent === 'object') {
            // go up a level in the hierarchy
            currentNode = currentNode.parent;
            // add the name to the beginning of the list
            nameList.unshift(currentNode.name);
          }
          // now nameList should look like ['flare','animate','interpolate']
          //  join the array with slashes (as you have in your example)
          


          //nameList = nameList.join('/');
          
          // now nameList should look like 'flare/animate/interpolate'
          //  use this to set the tooltip text

          $(tt).text('PATH: ' + nameList[nameList.length-1] + '. ITEM SIZE = ' + d.size/1000000000 + ' GB ');
        });

  cell.append("svg:rect")
      .attr("width", function(d) {   return d.dx;  })
      .attr("height", function(d) {  return d.dy;    })
      .style("fill", function(d) { 

        if($(tt).attr('id')=="tooltip1"){
          return color(d.name);
        }


        if(d.name == "empty"){
            return "#000000";
        }
        else if(d.size <= 10000000){
            return color(  Math.floor((Math.random() * 3) + 1)   );
        }
        else if(d.size <= 10000000000 ){
            return color(   Math.floor((Math.random() * 6) + 1)   );
        }
        else{
          return color(    Math.floor((Math.random() * 9) + 1)    );
        }



          return color(d.parent.name); 



        });


  //d3.select(window).on("click", function() { zoom(root); });

  d3.select("select").on("change", function() {
    tm.value(this.value == "size" ? size : count).nodes(root);
    zoom(node);
  });




function size(d) {
  return d.size;
}

function count(d) {
  return 1;
}


function zoom(d) {
  var kx = w / d.dx, ky = h / d.dy;
  x.domain([d.x, d.x + d.dx]);
  y.domain([d.y, d.y + d.dy]);

  var t = svg.selectAll("g.cell").transition()
      .duration(d3.event.altKey ? 7500 : 750)
      .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });

  t.select("rect")
      .attr("width", function(d) {  return kx*d.dx;    })
      .attr("height", function(d) { return ky*d.dy;      })

  t.select("text")
      .attr("x", function(d) { return kx * d.dx / 2; })
      .attr("y", function(d) { return ky * d.dy / 2; })
      .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

  node = d;
  d3.event.stopPropagation();

}

_json = null; 

};



function init() {

  console.log("init firing");

$.ajax({
        type: "GET",
        url: "/tmdata",
        timeout:180000,
        success: function(res){
        

        curryInit( document.getElementById("hi"), res, treemap, document.getElementById("tooltip") );
   
      },

      error: function(request, status, err){
        
      }

      });

};


function clearTm(){

  $("#hi").empty();

  var w = 1280 - 80,
    h = 800 - 180,
    x = d3.scale.linear().range([0, w]),
    y = d3.scale.linear().range([0, h]),
    color = d3.scale.category20(),
    //color= d3.scale.ordinal().range(colorbrewer.RdBu[9]),
    root,
    node;

var treemap = d3.layout.treemap()
    .round(false)
    .size([w, h])
    .sticky(true)
    .value(function(d) { return d.size; });


}


function newImg() {

var data = '';

if($("#chn").val()=="liang" ){
  data={item: "tma_liang_nested" };
}

if($("#chn").val()=="su2c")
  data= {item: "tma_su2c_nested" };

$.ajax({
        type: "POST",
        url: "/tmdata_update",
        data:data,
        timeout:180000,
        success: function(res){
        
        console.log(res);
        clearTm();
        curryInit( document.getElementById("hi"), res, treemap, document.getElementById("tooltip") );
   
      },

      error: function(request, status, err){
        
      }

      });




};




window.onload=init;


    </script>
  </body>




</html>
